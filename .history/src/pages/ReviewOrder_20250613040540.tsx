import { useCallback, useState } from "react";
import { Link } from "react-router-dom";

































































































































































































































































































































export default ReviewOrder;};  );    </div>      </div>        </div>          </div>            </div>              </div>                </Link>                  Quay lại giỏ hàng                >                  className="block w-full rounded-full border border-gray-300 px-4 py-3 text-center text-gray-700 transition-colors hover:bg-gray-50"                  to="/cart"                <Link                </Link>                  Tiến hành thanh toán                >                  className="block w-full rounded-full bg-black px-4 py-3 text-center text-white transition-colors hover:bg-gray-800 hover:shadow-lg"                  to="/payment"                <Link              <div className="mt-6 space-y-3">                            </div>                </p>                  (Đã bao gồm VAT nếu có)                <p className="mt-1 text-sm text-gray-500">                </div>                  <span>{formatPrice(order.totalPrice)}</span>                  <span>Tổng cộng</span>                <div className="flex justify-between text-lg font-semibold">              <div className="border-t pt-4">              </div>                <span>Miễn phí</span>                <span>Phí vận chuyển</span>              <div className="flex justify-between">              )}                </div>                  <span>-{formatPrice(totalDiscount)}</span>                  <span>Giảm giá</span>                <div className="flex justify-between text-green-600">              {totalDiscount > 0 && (              </div>                </span>                  )}                    )                      0                      (sum, item) => sum + item.totalPriceProduct,                    order.orderItems.reduce(                  {formatPrice(                <span>                <span>Tạm tính</span>              <div className="flex justify-between">            <div className="space-y-4">            <h3 className="mb-4 text-lg font-semibold">Tổng quan đơn hàng</h3>          <div className="rounded-lg bg-white p-6 shadow">        <div className="lg:col-span-1">        {/* Order Summary */}        </div>          )}            </div>              </div>                ))}                  </div>                    </span>                        : `-${formatPrice(promo.discountAmount)}`}                        ? `-${promo.discountAmount}%`                      {promo.proportionType === "PERCENTAGE"                    <span className="text-green-600">                    </div>                      </p>                        {promo.description}                      <p className="text-sm text-gray-600">                      <p className="font-medium">{promo.promotionName}</p>                    <div>                  >                    className="flex items-center justify-between rounded-lg border border-gray-200 p-3"                    key={promo.id}                  <div                {order.usedPromotions.map((promo) => (              <div className="space-y-3">              </h3>                Khuyến mãi áp dụng              <h3 className="mb-4 text-lg font-semibold">            <div className="rounded-lg bg-white p-6 shadow">          {order.usedPromotions.length > 0 && (          {/* Applied Promotions */}          </div>            </div>              ))}                </div>                  </div>                    </div>                      </div>                        )}                          </p>                            {formatPrice(item.totalPriceProduct)}                          <p className="text-sm text-gray-500 line-through">                        {item.totalPriceProduct > item.updatePriceProduct && (                        </p>                          {formatPrice(item.updatePriceProduct)}                        <p className="font-medium">                      <div className="text-right">                      </div>                        </p>                          Số lượng: {item.quantity}                        <p className="mt-1 text-sm text-gray-500">                        <h4 className="font-medium">{item.product.productName}</h4>                      <div>                    <div className="flex justify-between">                  <div className="ml-4 flex flex-1 flex-col">                  </div>                    />                      className="h-full w-full rounded-lg object-cover"                      alt={item.product.productName}                      src={item.product.image}                    <img                  <div className="h-24 w-24 flex-shrink-0">                <div key={item.id} className="flex py-4">              {order.orderItems.map((item) => (            <div className="divide-y">            <h3 className="mb-4 text-lg font-semibold">Sản phẩm</h3>          <div className="rounded-lg bg-white p-6 shadow">          {/* Order Items */}          <AddressForm address={order.address} onUpdate={handleUpdateAddress} />          {/* Address Section */}        <div className="lg:col-span-2 space-y-6">        {/* Main Content */}      <div className="grid grid-cols-1 gap-8 lg:grid-cols-3">      <h1 className="mb-8 text-2xl font-bold">Xác nhận đơn hàng</h1>    <div className="container mx-auto px-4 py-8">  return (  const totalDiscount = calculateDiscounts();  }    );      </div>        <p>Đang tải thông tin đơn hàng...</p>      <div className="container mx-auto px-4 py-8">    return (  if (loading || !order) {  }, [order]);    );      0      (sum, item) => sum + (item.totalPriceProduct - item.updatePriceProduct),    return order.orderItems.reduce(    if (!order) return 0;  const calculateDiscounts = useCallback(() => {  }, [order]);    // TODO: Call API to update address    });      address: newAddress,      ...order,    setOrder({    if (!order) return;  const handleUpdateAddress = useCallback((newAddress: AddressDto) => {  const [loading, setLoading] = useState(true);  const [order, setOrder] = useState<OrderDto | null>(null);const ReviewOrder: React.FC = () => {};  );    </form>      </div>        </div>          </button>            Lưu thay đổi          >            className="rounded-full bg-black px-4 py-2 text-white transition-colors hover:bg-gray-800"            type="submit"          <button          </button>            Hủy          >            className="rounded-full border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"            onClick={() => setIsEditing(false)}            type="button"          <button        <div className="mt-4 flex justify-end space-x-3">        </div>          </div>            />              required              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"              }                setFormData({ ...formData, pincode: e.target.value })              onChange={(e) =>              value={formData.pincode}              type="text"            <input            </label>              Mã bưu điện            <label className="block text-sm font-medium text-gray-700">          <div>          </div>            />              required              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"              }                setFormData({ ...formData, country: e.target.value })              onChange={(e) =>              value={formData.country}              type="text"            <input            </label>              Quốc gia            <label className="block text-sm font-medium text-gray-700">          <div>        <div className="grid grid-cols-2 gap-4">        </div>          </div>            />              required              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"              }                setFormData({ ...formData, state: e.target.value })              onChange={(e) =>              value={formData.state}              type="text"            <input            </label>              Tỉnh/Thành            <label className="block text-sm font-medium text-gray-700">          <div>          </div>            />              required              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"              }                setFormData({ ...formData, city: e.target.value })              onChange={(e) =>              value={formData.city}              type="text"            <input            </label>              Thành phố            <label className="block text-sm font-medium text-gray-700">          <div>        <div className="grid grid-cols-2 gap-4">        </div>          />            required            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"            }              setFormData({ ...formData, street: e.target.value })            onChange={(e) =>            value={formData.street}            type="text"          <input          </label>            Đường          <label className="block text-sm font-medium text-gray-700">        <div>        </div>          />            required            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-black focus:outline-none focus:ring-1 focus:ring-black"            }              setFormData({ ...formData, buildingName: e.target.value })            onChange={(e) =>            value={formData.buildingName}            type="text"          <input          </label>            Tên tòa nhà/Số nhà          <label className="block text-sm font-medium text-gray-700">        <div>      <div className="space-y-4">      <h3 className="mb-4 text-lg font-semibold">Cập nhật địa chỉ</h3>    <form onSubmit={handleSubmit} className="rounded-lg bg-white p-6 shadow">  return (  }    );      </div>        </div>          <p>{address.country}, {address.pincode}</p>          <p>{address.city}, {address.state}</p>          <p>{address.street}</p>          <p className="font-medium">{address.buildingName}</p>        <div className="mt-4 space-y-2 text-gray-600">        </div>          </button>            Thay đổi          >            className="text-sm text-blue-600 hover:text-blue-800"            onClick={() => setIsEditing(true)}          <button          <h3 className="text-lg font-semibold">Địa chỉ giao hàng</h3>        <div className="flex items-center justify-between">      <div className="rounded-lg bg-white p-6 shadow">    return (  if (!isEditing) {  };    setIsEditing(false);    onUpdate(formData);    e.preventDefault();  const handleSubmit = (e: React.FormEvent) => {  const [formData, setFormData] = useState(address);  const [isEditing, setIsEditing] = useState(false);const AddressForm: React.FC<AddressFormProps> = ({ address, onUpdate }) => {}  onUpdate: (address: AddressDto) => void;  address: AddressDto;interface AddressFormProps {import { Link } from "react-router-dom";import { formatPrice } from "../utils/formatPrice";