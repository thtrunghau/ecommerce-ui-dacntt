// PHÂN TÍCH DTO, SCHEMA, API RESPONSE BACKEND (final-ecommerce-api-main)

--- PRODUCT ---
ProductResDto (extends ProductReqDto):
{
  id: string (UUID),
  productName: string,
  image: string,
  description: string,
  quantity: number,
  price: number,
  categoryId: string (UUID)
}

API: GET /v1/products?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: ProductResDto[]
}

--- CATEGORY ---
CategoryResDto (extends CategoryReqDto):
{
  id: string (UUID),
  categoryName: string,
  products: ProductResDto[]
}

API: GET /v1/categories?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: CategoryResDto[]
}

API: GET /v1/categories/{id}
Response: CategoryResDto

--- CART ITEM ---
CartItemResDto (extends CartItemReqDto):
{
  id: string (UUID),
  productPrice: number,
  quantity: number,
  cartId: string (UUID),
  product: ProductResDto
}

--- ADDRESS ---
AddressResDto (extends AddressReqDto):
{
  id: string (UUID),
  street: string,
  buildingName: string,
  city: string,
  country: string,
  state: string,
  pincode: string,
  accountId: string (UUID)
}

API: GET /v1/addresses?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: AddressResDto[]
}

--- PROMOTION ---
PromotionResDto (extends PromotionReqDto):
{
  id: string (UUID),
  promotionName: string,
  promotionCode: string,
  description: string,
  startDate: string (ISO),
  endDate: string (ISO),
  discountAmount: number,
  promotionType: string (ALL_PRODUCTS | ORDER_TOTAL | SPECIFIC_PRODUCTS),
  proportionType: string (PERCENTAGE | ABSOLUTE),
  minOrderValue: number,
  productIds: string[] (UUID)
}

API: GET /v1/promotions?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: PromotionResDto[]
}

API: GET /v1/promotions/{id}
Response: PromotionResDto

--- CART ---
CartResDto:
{
  id: string (UUID),
  cartItems: CartItemResDto[]
}

API: GET /v1/carts/{id}
Response: CartResDto

--- ORDER ---
OrderResDto:
{
  id: string (UUID),
  totalPrice: number,
  paymentStatus: string,
  deliveryStatus: string,
  isShipCOD: boolean,
  orderDate: string (ISO),
  accountId: string (UUID),
  address: AddressResDto,
  usedPromotions: PromotionResDto[],
  orderItems: OrderItemResDto[]
}

API: GET /v1/orders/{id}
Response: OrderResDto

// Tài liệu đã hoàn thiện các DTO chính và API response.

===============================================================================
                    🚀 SENIOR DEV IMPROVEMENT ROADMAP 
===============================================================================

📊 CURRENT ASSESSMENT (Score: 7.2/10)
✅ Strengths: Modern tech stack, clean architecture, type safety, scalable structure
⚠️  Issues: State management gaps, missing tests, performance optimizations, production setup

===============================================================================
                         📋 PHASE 1: CRITICAL FIXES
                        Priority: HIGH | Timeline: 1-2 weeks
===============================================================================

🔴 1.1 STATE MANAGEMENT OVERHAUL
-----------------------------------
Target: Fix cart persistence và standardize state patterns

Tasks:
[ ] Implement CartStore với Zustand persistence
    File: src/store/cartStore.ts
    Features:
    - Cart items persistence (localStorage)
    - Optimistic updates
    - Quantity management
    - Price calculations với promotions
    - Item count badge
    
[ ] Implement ProductStore cho caching
    File: src/store/productStore.ts  
    Features:
    - Product list caching
    - Category-based filtering
    - Search functionality
    - Recently viewed products

[ ] Consolidate Auth patterns
    Action: Choose either Context hoặc Zustand, không mix both
    Recommendation: Keep Zustand authStore, remove AuthContext

Code Example:
```typescript
// src/store/cartStore.ts
interface CartStore {
  items: CartItemResDto[];
  isLoading: boolean;
  error: string | null;
  
  // Computed
  totalItems: number;
  totalPrice: number;
  
  // Actions  
  addItem: (product: ProductResDto, quantity: number) => Promise<void>;
  updateQuantity: (itemId: string, quantity: number) => Promise<void>;
  removeItem: (itemId: string) => Promise<void>;
  clearCart: () => void;
  syncWithServer: () => Promise<void>;
}
```

🔴 1.2 ERROR HANDLING SYSTEM
----------------------------
Target: Production-ready error management

Tasks:
[ ] Global Error Boundary
    File: src/components/ErrorBoundary.tsx
    
[ ] API Error Handler Service  
    File: src/services/errorHandler.ts
    Features:
    - Centralized error logging
    - User-friendly error messages
    - Retry mechanisms
    - Network error detection

[ ] Toast Notification System
    File: src/components/common/ToastProvider.tsx
    Library: react-hot-toast hoặc sonner

🔴 1.3 LOADING & UX IMPROVEMENTS
-------------------------------
Target: Better user experience

Tasks:
[ ] Global Loading States
    - Skeleton loaders cho products
    - Suspense boundaries
    - Loading spinners consistency
    
[ ] Error States UI
    - Empty states cho cart, products
    - Network error pages  
    - 404 error handling

===============================================================================
                        ⚡ PHASE 2: PERFORMANCE OPTIMIZATION  
                       Priority: HIGH | Timeline: 1-2 weeks
===============================================================================

🟡 2.1 DATA FETCHING OPTIMIZATION
--------------------------------
Target: Add caching và smart data management

Tasks:
[ ] Implement React Query
    Package: @tanstack/react-query
    Benefits:
    - Automatic caching
    - Background refetching  
    - Optimistic updates
    - Infinite queries cho pagination

[ ] API Response Caching
    Strategy:
    - Products: 5 minutes cache
    - Categories: 30 minutes cache  
    - Cart: Real-time updates
    - Promotions: 10 minutes cache

Code Example:
```typescript
// Custom hooks với React Query
const useProducts = (categoryId?: string) => {
  return useQuery({
    queryKey: ['products', categoryId],
    queryFn: () => getProductsByCategory(categoryId),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
  });
};
```

🟡 2.2 CODE SPLITTING & LAZY LOADING
-----------------------------------
Target: Reduce initial bundle size

Tasks:
[ ] Route-based code splitting
    Implementation:
    - React.lazy() cho tất cả pages
    - Suspense với loading fallbacks
    - Preload critical routes

[ ] Component-level splitting
    Strategy:
    - Heavy components (MaterialUI modals)
    - Third-party integrations
    - Admin-only components

🟡 2.3 REACT PERFORMANCE
-----------------------
Target: Optimize rendering performance

Tasks:
[ ] Memoization audit
    Actions:
    - React.memo cho expensive components
    - useMemo cho calculations
    - useCallback cho event handlers
    
[ ] Virtual scrolling
    Component: ProductList, OrderHistory
    Library: @tanstack/react-virtual
    
[ ] Image optimization
    Strategy:
    - WebP format support
    - Lazy loading with Intersection Observer
    - Progressive image loading

===============================================================================
                           🧪 PHASE 3: TESTING STRATEGY
                        Priority: MEDIUM | Timeline: 2-3 weeks  
===============================================================================

🟢 3.1 TESTING FOUNDATION SETUP
------------------------------
Target: Comprehensive testing pyramid

Tasks:
[ ] Unit Testing Setup
    Framework: Vitest (fast, Vite-native)
    Library: @testing-library/react
    Coverage: 80%+ target
    
[ ] Integration Testing
    Focus: API integration, form submissions
    Tools: MSW (Mock Service Worker)
    
[ ] E2E Testing Setup
    Framework: Playwright
    Critical paths: User journey, checkout flow

🟢 3.2 TEST IMPLEMENTATION PRIORITY
---------------------------------
Target: Test critical business logic first

Phase 3a - Core Logic (Week 1):
[ ] utils/helpers.ts (promotion calculations) 
[ ] store/cartStore.ts (state management)
[ ] services/api.ts (API calls)

Phase 3b - Components (Week 2):
[ ] CartItem component
[ ] ProductCard component  
[ ] Forms (Login, Register, Address)

Phase 3c - Integration (Week 3):
[ ] Cart flow end-to-end
[ ] Checkout process
[ ] Authentication flow

Example Test Structure:
```typescript
// src/utils/__tests__/helpers.test.ts
describe('Promotion Calculations', () => {
  it('should apply percentage discount correctly', () => {
    const result = getProductPriceInfo('product-1', 100000);
    expect(result.finalPrice).toBe(80000); // 20% off
    expect(result.hasActivePromotion).toBe(true);
  });
});
```

===============================================================================
                          🏗️  PHASE 4: ARCHITECTURE IMPROVEMENTS
                         Priority: MEDIUM | Timeline: 2-3 weeks
===============================================================================

🔵 4.1 FEATURE-BASED ARCHITECTURE  
---------------------------------
Target: Better code organization và team collaboration

Migration Plan:
```
src/
├── features/
│   ├── auth/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── services/
│   │   ├── store/
│   │   └── types/
│   ├── products/
│   ├── cart/
│   └── orders/
└── shared/
    ├── components/
    ├── hooks/
    ├── services/
    └── utils/
```

🔵 4.2 CUSTOM HOOKS PATTERN
--------------------------
Target: Reusable business logic

Priority Hooks:
[ ] useCart() - Cart operations
[ ] useAuth() - Authentication 
[ ] useProducts() - Product fetching
[ ] useLocalStorage() - Persistent state
[ ] useDebounce() - Search optimization

🔵 4.3 COMPONENT COMPOSITION
---------------------------
Target: More flexible, reusable components

Pattern Examples:
```typescript
// Compound component pattern
<Modal>
  <Modal.Header>Title</Modal.Header>
  <Modal.Body>Content</Modal.Body>
  <Modal.Footer>Actions</Modal.Footer>
</Modal>

// Render props pattern  
<DataFetcher url="/api/products">
  {({ data, loading, error }) => (
    <ProductList products={data} loading={loading} />
  )}
</DataFetcher>
```

===============================================================================
                            🔐 PHASE 5: PRODUCTION READINESS
                           Priority: LOW | Timeline: 2-3 weeks
===============================================================================

🟣 5.1 SECURITY ENHANCEMENTS
---------------------------
Tasks:
[ ] Input sanitization (DOMPurify)
[ ] XSS protection utilities
[ ] CSRF token handling
[ ] Content Security Policy setup
[ ] API rate limiting (client-side)

🟣 5.2 MONITORING & OBSERVABILITY  
--------------------------------
Tasks:
[ ] Error tracking (Sentry integration)
[ ] Performance monitoring (Web Vitals)
[ ] User analytics (PostHog/Mixpanel)
[ ] A/B testing framework setup

🟣 5.3 DEVOPS & DEPLOYMENT
-------------------------
Tasks:
[ ] Docker containerization
[ ] CI/CD pipeline (GitHub Actions)
[ ] Environment configuration (.env management)
[ ] Bundle analysis & optimization
[ ] Automated deployment to staging/production

===============================================================================
                               📊 SUCCESS METRICS
===============================================================================

🎯 PHASE 1 COMPLETION CRITERIA:
- [ ] Cart persistence works across browser sessions
- [ ] No unhandled errors in production
- [ ] Loading states cho tất cả async operations
- [ ] Toast notifications cho user feedback

⚡ PHASE 2 COMPLETION CRITERIA:  
- [ ] Bundle size < 500KB gzipped
- [ ] LCP < 2.5s, FID < 100ms, CLS < 0.1
- [ ] All API calls cached appropriately
- [ ] Lazy loading implemented

🧪 PHASE 3 COMPLETION CRITERIA:
- [ ] 80%+ test coverage  
- [ ] All critical paths có E2E tests
- [ ] CI/CD pipeline runs tests automatically
- [ ] Zero test flakiness

🏗️  PHASE 4 COMPLETION CRITERIA:
- [ ] Feature-based folder structure
- [ ] All business logic in custom hooks  
- [ ] Components 100% reusable
- [ ] Zero circular dependencies

🔐 PHASE 5 COMPLETION CRITERIA:
- [ ] Zero security vulnerabilities
- [ ] Full production monitoring setup
- [ ] Automated deployments working
- [ ] Performance budgets enforced

===============================================================================
                                🎖️  FINAL GOALS
===============================================================================

🏆 TARGET SCORES AFTER COMPLETION:

| Aspect | Current | Target | Improvement |
|--------|---------|--------|-------------|
| Architecture | 8/10 | 9/10 | Feature-based structure |
| Code Quality | 8/10 | 9/10 | Testing + hooks pattern |
| Performance | 6/10 | 9/10 | React Query + optimizations |
| Testing | 3/10 | 8/10 | Comprehensive test suite |  
| Security | 7/10 | 9/10 | Production security measures |
| Production Ready | 6/10 | 9/10 | Full DevOps pipeline |

🎯 OVERALL TARGET: 8.7/10 (Production-ready enterprise application)

===============================================================================
                            📝 IMPLEMENTATION NOTES
===============================================================================

🔧 DEVELOPMENT WORKFLOW:
1. Create feature branch cho mỗi phase
2. Code review mandatory cho tất cả changes  
3. Testing before merge to main
4. Staging deployment cho manual testing
5. Production deployment sau full testing

⚠️  RISK MITIGATION:
- Backup current working version trước major changes
- Incremental implementation (không big bang)
- Fallback plans cho mỗi major change
- Load testing trước production deployment

📚 LEARNING RESOURCES:
- React Query documentation và best practices
- Testing Library patterns và strategies  
- Performance optimization guides
- Security best practices cho React apps

🎉 EXPECTED OUTCOMES:
- Production-ready ecommerce platform
- Maintainable, scalable codebase
- Excellent user experience  
- Zero production bugs
- Fast development velocity for future features

===============================================================================
                                   END PLAN
===============================================================================

=====================================
📊 DATA CONSISTENCY ANALYSIS
=====================================

## CURRENT STATE ASSESSMENT:

### ✅ STRENGTHS:
1. **Type Safety**: All mock data follows defined interfaces
2. **Consistent Structure**: CartItemResDto, ProductResDto, OrderDto have consistent structure
3. **Real Images**: Updated all placeholder images to real Unsplash images
4. **Proper Relationships**: Foreign keys (categoryId, cartId, accountId) are maintained correctly
5. **Pagination Support**: Implemented PaginatedResponse for API compatibility
6. **Mock Data Quality**: 
   - Samsung products with Vietnamese names/descriptions
   - Realistic pricing in VND
   - Proper categories and relationships
   - Cart and order data consistency

### ⚠️ POTENTIAL ISSUES:
1. **Backend Schema Gap**: Only Request DTOs available, no Response DTOs to validate against
2. **ID Format Mismatch**: 
   - Frontend: string IDs (some UUID, some custom like "s24-ultra-1")
   - Backend: UUID format expected
3. **Type Precision**: Backend uses `double` for prices, frontend uses `number` (generally compatible)
4. **Optional Fields**: Frontend has additional optional fields not in backend schema:
   - ProductResDto: `isNew`, `slug`
   - CategoryResDto: `key`
5. **Date Format**: Backend expects ISO date-time format, frontend uses string dates

### 🔧 RECOMMENDATIONS:

#### IMMEDIATE ACTIONS:
1. **Standardize ID Format**: 
   - Convert all product IDs to UUID format
   - Ensure consistent UUID usage across all entities
   
2. **Validate Date Formats**:
   - Ensure all dates follow ISO 8601 format
   - Add proper date validation in forms
   
3. **Backend Schema Sync**:
   - Request backend Response DTOs or API documentation
   - Create integration tests with actual API endpoints
   
4. **Type Refinement**:
   - Add stricter type definitions for enums
   - Implement proper validation for required fields

#### PHASE 1 ACTIONS:
1. **API Integration Layer**:
   - Create proper request/response transformers
   - Handle ID format conversion between frontend/backend
   - Add proper error handling for schema mismatches

2. **Mock Data Enhancement**:
   - Add more realistic data variations
   - Include edge cases (out of stock, discontinued products)
   - Add proper error states for testing

3. **Validation Layer**:
   - Implement Zod schemas for runtime validation
   - Add client-side validation matching backend constraints
   - Create proper error messages for validation failures

=====================================
🔍 API SPECIFICATION ANALYSIS
=====================================

## API ENDPOINTS DISCOVERED:

### 🛍️ PRODUCT MANAGEMENT:
- GET/POST /api/v1/products (with pagination)
- GET/PUT/DELETE /api/v1/products/{id}
- Filters: page, size, sort, filter parameters

### 🏷️ CATEGORY MANAGEMENT:
- GET/POST /api/v1/categories (with pagination)
- GET/PUT/DELETE /api/v1/categories/{id}

### 🎫 PROMOTION MANAGEMENT:
- GET/POST /api/v1/promotions (with pagination)
- GET/PUT/DELETE /api/v1/promotions/{id}
- GET /api/v1/promotions/get-by-code/{code}

### 🛒 CART MANAGEMENT:
- GET/POST /api/v1/carts (with pagination)
- GET/PUT /api/v1/carts/{id}
- GET /api/v1/carts/get-by-token (current user cart)
- POST /api/v1/carts/update-item-quantity
- POST /api/v1/carts/refresh-cart/{cartId}

### 📦 ORDER MANAGEMENT:
- GET/POST /api/v1/orders (with pagination)
- GET /api/v1/orders/{id}
- POST /api/v1/orders/cal-temp-total-price
- POST /api/v1/orders/take-available-coupon

### 📍 ADDRESS MANAGEMENT:
- GET/POST /api/v1/addresses (with pagination)
- GET/PUT/DELETE /api/v1/addresses/{id}
- GET /api/v1/addresses/get-by-account/{accountId}

### 👤 ACCOUNT MANAGEMENT:
- GET/POST /api/v1/accounts (with pagination, requires auth)
- GET/PUT/DELETE /api/v1/accounts/{id}
- POST /api/v1/webapp/account/signup
- POST /api/v1/webapp/account/google/signup

### 🔐 AUTHENTICATION:
- POST /api/token (login)
- POST /api/google/token (Google login)
- GET /api/token/details

### 💳 PAYMENT:
- POST /api/stripe/charges
- POST /api/stripe/webhook

### 📁 FILE UPLOAD:
- GET/PUT /api/s3/presigned-url

## 🎯 VALIDATION CONSTRAINTS:

### ProductReqDto:
- productName: min 5 chars
- description: min 5 chars
- quantity: integer (int32)
- price: number (double)
- categoryId: UUID format
- image: string

### PromotionReqDto:
- promotionName: min 5 chars
- promotionCode: min 5 chars, pattern: ^[A-Z0-9]+$
- description: min 10 chars
- startDate/endDate: ISO date-time format
- discountAmount: number (double)
- promotionType: enum [ALL_PRODUCTS, ORDER_TOTAL, SPECIFIC_PRODUCTS]
- proportionType: enum [PERCENTAGE, ABSOLUTE]
- productIds: array of UUIDs (unique)

### AddressReqDto:
- street: min 5 chars
- buildingName: min 5 chars
- city: min 4 chars
- country: min 2 chars
- state: min 2 chars
- pincode: min 6 chars
- accountId: UUID (required)

### AccountRequestDTO:
- username: min 1 char
- email: min 1 char
- phoneNumber: pattern ^0\d{9}$ (Vietnamese phone format)
- birthYear: integer (int32)
- groupId: UUID

### CartQuantityReqDto:
- productId: UUID (required)
- delta: integer (required) - quantity change
- cartId: UUID (optional)

### PlaceOrderReqDto:
- cartId: UUID (required)
- addressId: UUID (required)
- promotionIds: array of UUIDs (optional)
- shipCOD: boolean (optional)

## 📄 PAGINATION STRUCTURE:
```typescript
ApiPageableResponse {
  currentPage: number (int32)
  pageSize: number (int32)
  totalPages: number (int32)
  totalElements: number (int64)
  data: array of objects
  first: boolean
  last: boolean
}
```

## 🔑 AUTHENTICATION:
- Type: Bearer Token (JWT)
- Header: Authorization: Bearer <token>
- Some endpoints require authentication (marked with security)

=====================================
## 🔐 AUTHENTICATION IMPLEMENTATION PLAN

### 1. Token Management

#### JWT Authentication
- [ ] Create `tokenService.ts` to handle JWT operations
  - Store tokens securely (localStorage with encryption or httpOnly cookies if supported)
  - Decode JWT payload to extract user info and permissions
  - Track token expiration and implement refresh mechanism
  - Handle token rotation for security

#### Authentication Store
- [ ] Enhance `authStore.ts` to work with real API endpoints:
  - Connect login/logout to actual API calls
  - Store user profile information
  - Store user roles and permissions
  - Handle auth state persistence (remember me)
  - Provide auth status to components

### 2. Authentication UI/UX

#### Login Implementation
- [ ] Update `Login.tsx` for API integration:  - [x] Connect form to `authApi.login()` endpoint
  - [x] Add Google OAuth login button
  - [x] Implement "Remember me" functionality
  - [x] Add proper validation matching backend constraints
  - [x] Handle API errors and display user-friendly messages
  - [x] Add loading states during authentication

#### Register Implementation  
- [x] Update `Register.tsx` for API integration:
  - [x] Connect form to `accountApi.signup()` endpoint
  - [x] Add loading states and error handling
  - [x] Validate all fields against backend constraints
  - [ ] Add Google signup button integration
  - [ ] Implement two-step verification if needed
  - [ ] Show appropriate success/error feedback

#### Password Management
- [ ] Implement `ForgotPassword.tsx` functionality:
  - Request password reset email
  - Reset password form with confirmation
  - Password strength requirements

### 3. Authorization & Protection

#### Route Protection
- [x] Create authorization wrapper components:
  - [x] `ProtectedRoute` component to guard private routes
  - [x] `RoleBasedRoute` for admin/customer specific areas
  - [x] Redirect unauthorized users to login
  - [x] Implement Forbidden (403) page

#### Permission-based UI
- [ ] Implement permission-based UI rendering:
  - Show/hide elements based on user roles
  - Display appropriate error messages for unauthorized actions
  - Prevent unauthorized API calls

### 4. Session Management

#### Session Handling
- [ ] Implement session management:
  - Auto-logout on token expiry
  - Silent token refresh when possible
  - Multi-tab session synchronization
  - Security measures (prevent session hijacking)

#### Auth Persistence
- [ ] Create persistence layer:
  - Configure secure storage strategy
  - Handle "Remember me" functionality properly
  - Implement session timeout settings
  - Clear sensitive data on logout

### 5. Security Measures

#### Security Enhancements
- [ ] Implement security best practices:
  - CSRF protection for form submissions
  - Prevent XSS in user inputs
  - Rate limiting for login attempts
  - Secure headers configuration

#### Error Handling
- [ ] Improve error handling:
  - Generic vs. specific auth errors
  - User-friendly error messages
  - Logging for security events
  - Fallback mechanisms

### 6. Testing & QA

#### Authentication Testing
- [ ] Create comprehensive tests:
  - Unit tests for auth functions
  - Integration tests for login/register flows
  - Test cases for token expiration
  - Edge cases (network issues, server errors)

### 7. Integration Points

#### API Integration
- [ ] Ensure consistent auth header usage:
  - Add auth headers to all protected API calls
  - Handle 401/403 responses globally
  - Refresh tokens when needed
  - Redirect to login when session invalid

#### Auth Context Migration
- [x] Migration from current implementation:
  - [x] Prepare token service for JWT operations
  - [x] Set up auth API infrastructure
  - [x] Update UI components to use new authentication flow
  - [x] Add Google OAuth button support
  - [ ] Complete real API integration (when backend is available)
  - [ ] Document new authentication flow
