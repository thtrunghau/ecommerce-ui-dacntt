// PHÂN TÍCH DTO, SCHEMA, API RESPONSE BACKEND (final-ecommerce-api-main)

--- PRODUCT ---
ProductResDto (extends ProductReqDto):
{
  id: string (UUID),
  productName: string,
  image: string,
  description: string,
  quantity: number,
  price: number,
  categoryId: string (UUID)
}

API: GET /v1/products?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: ProductResDto[]
}

--- CATEGORY ---
CategoryResDto (extends CategoryReqDto):
{
  id: string (UUID),
  categoryName: string,
  products: ProductResDto[]
}

API: GET /v1/categories?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: CategoryResDto[]
}

API: GET /v1/categories/{id}
Response: CategoryResDto

--- CART ITEM ---
CartItemResDto (extends CartItemReqDto):
{
  id: string (UUID),
  productPrice: number,
  quantity: number,
  cartId: string (UUID),
  product: ProductResDto
}

--- ADDRESS ---
AddressResDto (extends AddressReqDto):
{
  id: string (UUID),
  street: string,
  buildingName: string,
  city: string,
  country: string,
  state: string,
  pincode: string,
  accountId: string (UUID)
}

API: GET /v1/addresses?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: AddressResDto[]
}

--- PROMOTION ---
PromotionResDto (extends PromotionReqDto):
{
  id: string (UUID),
  promotionName: string,
  promotionCode: string,
  description: string,
  startDate: string (ISO),
  endDate: string (ISO),
  discountAmount: number,
  promotionType: string (ALL_PRODUCTS | ORDER_TOTAL | SPECIFIC_PRODUCTS),
  proportionType: string (PERCENTAGE | ABSOLUTE),
  minOrderValue: number,
  productIds: string[] (UUID)
}

API: GET /v1/promotions?page=0&pageSize=10
Response:
{
  currentPage: number,
  pageSize: number,
  totalPages: number,
  totalElements: number,
  isLast: boolean,
  isFirst: boolean,
  data: PromotionResDto[]
}

API: GET /v1/promotions/{id}
Response: PromotionResDto

--- CART ---
CartResDto:
{
  id: string (UUID),
  cartItems: CartItemResDto[]
}

API: GET /v1/carts/{id}
Response: CartResDto

--- ORDER ---
OrderResDto:
{
  id: string (UUID),
  totalPrice: number,
  paymentStatus: string,
  deliveryStatus: string,
  isShipCOD: boolean,
  orderDate: string (ISO),
  accountId: string (UUID),
  address: AddressResDto,
  usedPromotions: PromotionResDto[],
  orderItems: OrderItemResDto[]
}

API: GET /v1/orders/{id}
Response: OrderResDto

// Tài liệu đã hoàn thiện các DTO chính và API response.

===============================================================================
                    🚀 SENIOR DEV IMPROVEMENT ROADMAP 
===============================================================================

📊 CURRENT ASSESSMENT (Score: 7.2/10)
✅ Strengths: Modern tech stack, clean architecture, type safety, scalable structure
⚠️  Issues: State management gaps, missing tests, performance optimizations, production setup

===============================================================================
                         📋 PHASE 1: CRITICAL FIXES
                        Priority: HIGH | Timeline: 1-2 weeks
===============================================================================

🔴 1.1 STATE MANAGEMENT OVERHAUL
-----------------------------------
Target: Fix cart persistence và standardize state patterns

Tasks:
[ ] Implement CartStore với Zustand persistence
    File: src/store/cartStore.ts
    Features:
    - Cart items persistence (localStorage)
    - Optimistic updates
    - Quantity management
    - Price calculations với promotions
    - Item count badge
    
[ ] Implement ProductStore cho caching
    File: src/store/productStore.ts  
    Features:
    - Product list caching
    - Category-based filtering
    - Search functionality
    - Recently viewed products

[ ] Consolidate Auth patterns
    Action: Choose either Context hoặc Zustand, không mix both
    Recommendation: Keep Zustand authStore, remove AuthContext

Code Example:
```typescript
// src/store/cartStore.ts
interface CartStore {
  items: CartItemResDto[];
  isLoading: boolean;
  error: string | null;
  
  // Computed
  totalItems: number;
  totalPrice: number;
  
  // Actions  
  addItem: (product: ProductResDto, quantity: number) => Promise<void>;
  updateQuantity: (itemId: string, quantity: number) => Promise<void>;
  removeItem: (itemId: string) => Promise<void>;
  clearCart: () => void;
  syncWithServer: () => Promise<void>;
}
```

🔴 1.2 ERROR HANDLING SYSTEM
----------------------------
Target: Production-ready error management

Tasks:
[ ] Global Error Boundary
    File: src/components/ErrorBoundary.tsx
    
[ ] API Error Handler Service  
    File: src/services/errorHandler.ts
    Features:
    - Centralized error logging
    - User-friendly error messages
    - Retry mechanisms
    - Network error detection

[ ] Toast Notification System
    File: src/components/common/ToastProvider.tsx
    Library: react-hot-toast hoặc sonner

🔴 1.3 LOADING & UX IMPROVEMENTS
-------------------------------
Target: Better user experience

Tasks:
[ ] Global Loading States
    - Skeleton loaders cho products
    - Suspense boundaries
    - Loading spinners consistency
    
[ ] Error States UI
    - Empty states cho cart, products
    - Network error pages  
    - 404 error handling

===============================================================================
                        ⚡ PHASE 2: PERFORMANCE OPTIMIZATION  
                       Priority: HIGH | Timeline: 1-2 weeks
===============================================================================

🟡 2.1 DATA FETCHING OPTIMIZATION
--------------------------------
Target: Add caching và smart data management

Tasks:
[ ] Implement React Query
    Package: @tanstack/react-query
    Benefits:
    - Automatic caching
    - Background refetching  
    - Optimistic updates
    - Infinite queries cho pagination

[ ] API Response Caching
    Strategy:
    - Products: 5 minutes cache
    - Categories: 30 minutes cache  
    - Cart: Real-time updates
    - Promotions: 10 minutes cache

Code Example:
```typescript
// Custom hooks với React Query
const useProducts = (categoryId?: string) => {
  return useQuery({
    queryKey: ['products', categoryId],
    queryFn: () => getProductsByCategory(categoryId),
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000,   // 10 minutes
  });
};
```

🟡 2.2 CODE SPLITTING & LAZY LOADING
-----------------------------------
Target: Reduce initial bundle size

Tasks:
[ ] Route-based code splitting
    Implementation:
    - React.lazy() cho tất cả pages
    - Suspense với loading fallbacks
    - Preload critical routes

[ ] Component-level splitting
    Strategy:
    - Heavy components (MaterialUI modals)
    - Third-party integrations
    - Admin-only components

🟡 2.3 REACT PERFORMANCE
-----------------------
Target: Optimize rendering performance

Tasks:
[ ] Memoization audit
    Actions:
    - React.memo cho expensive components
    - useMemo cho calculations
    - useCallback cho event handlers
    
[ ] Virtual scrolling
    Component: ProductList, OrderHistory
    Library: @tanstack/react-virtual
    
[ ] Image optimization
    Strategy:
    - WebP format support
    - Lazy loading with Intersection Observer
    - Progressive image loading

===============================================================================
                           🧪 PHASE 3: TESTING STRATEGY
                        Priority: MEDIUM | Timeline: 2-3 weeks  
===============================================================================

🟢 3.1 TESTING FOUNDATION SETUP
------------------------------
Target: Comprehensive testing pyramid

Tasks:
[ ] Unit Testing Setup
    Framework: Vitest (fast, Vite-native)
    Library: @testing-library/react
    Coverage: 80%+ target
    
[ ] Integration Testing
    Focus: API integration, form submissions
    Tools: MSW (Mock Service Worker)
    
[ ] E2E Testing Setup
    Framework: Playwright
    Critical paths: User journey, checkout flow

🟢 3.2 TEST IMPLEMENTATION PRIORITY
---------------------------------
Target: Test critical business logic first

Phase 3a - Core Logic (Week 1):
[ ] utils/helpers.ts (promotion calculations) 
[ ] store/cartStore.ts (state management)
[ ] services/api.ts (API calls)

Phase 3b - Components (Week 2):
[ ] CartItem component
[ ] ProductCard component  
[ ] Forms (Login, Register, Address)

Phase 3c - Integration (Week 3):
[ ] Cart flow end-to-end
[ ] Checkout process
[ ] Authentication flow

Example Test Structure:
```typescript
// src/utils/__tests__/helpers.test.ts
describe('Promotion Calculations', () => {
  it('should apply percentage discount correctly', () => {
    const result = getProductPriceInfo('product-1', 100000);
    expect(result.finalPrice).toBe(80000); // 20% off
    expect(result.hasActivePromotion).toBe(true);
  });
});
```

===============================================================================
                          🏗️  PHASE 4: ARCHITECTURE IMPROVEMENTS
                         Priority: MEDIUM | Timeline: 2-3 weeks
===============================================================================

🔵 4.1 FEATURE-BASED ARCHITECTURE  
---------------------------------
Target: Better code organization và team collaboration

Migration Plan:
```
src/
├── features/
│   ├── auth/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── services/
│   │   ├── store/
│   │   └── types/
│   ├── products/
│   ├── cart/
│   └── orders/
└── shared/
    ├── components/
    ├── hooks/
    ├── services/
    └── utils/
```

🔵 4.2 CUSTOM HOOKS PATTERN
--------------------------
Target: Reusable business logic

Priority Hooks:
[ ] useCart() - Cart operations
[ ] useAuth() - Authentication 
[ ] useProducts() - Product fetching
[ ] useLocalStorage() - Persistent state
[ ] useDebounce() - Search optimization

🔵 4.3 COMPONENT COMPOSITION
---------------------------
Target: More flexible, reusable components

Pattern Examples:
```typescript
// Compound component pattern
<Modal>
  <Modal.Header>Title</Modal.Header>
  <Modal.Body>Content</Modal.Body>
  <Modal.Footer>Actions</Modal.Footer>
</Modal>

// Render props pattern  
<DataFetcher url="/api/products">
  {({ data, loading, error }) => (
    <ProductList products={data} loading={loading} />
  )}
</DataFetcher>
```

===============================================================================
                            🔐 PHASE 5: PRODUCTION READINESS
                           Priority: LOW | Timeline: 2-3 weeks
===============================================================================

🟣 5.1 SECURITY ENHANCEMENTS
---------------------------
Tasks:
[ ] Input sanitization (DOMPurify)
[ ] XSS protection utilities
[ ] CSRF token handling
[ ] Content Security Policy setup
[ ] API rate limiting (client-side)

🟣 5.2 MONITORING & OBSERVABILITY  
--------------------------------
Tasks:
[ ] Error tracking (Sentry integration)
[ ] Performance monitoring (Web Vitals)
[ ] User analytics (PostHog/Mixpanel)
[ ] A/B testing framework setup

🟣 5.3 DEVOPS & DEPLOYMENT
-------------------------
Tasks:
[ ] Docker containerization
[ ] CI/CD pipeline (GitHub Actions)
[ ] Environment configuration (.env management)
[ ] Bundle analysis & optimization
[ ] Automated deployment to staging/production

===============================================================================
                               📊 SUCCESS METRICS
===============================================================================

🎯 PHASE 1 COMPLETION CRITERIA:
- [ ] Cart persistence works across browser sessions
- [ ] No unhandled errors in production
- [ ] Loading states cho tất cả async operations
- [ ] Toast notifications cho user feedback

⚡ PHASE 2 COMPLETION CRITERIA:  
- [ ] Bundle size < 500KB gzipped
- [ ] LCP < 2.5s, FID < 100ms, CLS < 0.1
- [ ] All API calls cached appropriately
- [ ] Lazy loading implemented

🧪 PHASE 3 COMPLETION CRITERIA:
- [ ] 80%+ test coverage  
- [ ] All critical paths có E2E tests
- [ ] CI/CD pipeline runs tests automatically
- [ ] Zero test flakiness

🏗️  PHASE 4 COMPLETION CRITERIA:
- [ ] Feature-based folder structure
- [ ] All business logic in custom hooks  
- [ ] Components 100% reusable
- [ ] Zero circular dependencies

🔐 PHASE 5 COMPLETION CRITERIA:
- [ ] Zero security vulnerabilities
- [ ] Full production monitoring setup
- [ ] Automated deployments working
- [ ] Performance budgets enforced

===============================================================================
                                🎖️  FINAL GOALS
===============================================================================

🏆 TARGET SCORES AFTER COMPLETION:

| Aspect | Current | Target | Improvement |
|--------|---------|--------|-------------|
| Architecture | 8/10 | 9/10 | Feature-based structure |
| Code Quality | 8/10 | 9/10 | Testing + hooks pattern |
| Performance | 6/10 | 9/10 | React Query + optimizations |
| Testing | 3/10 | 8/10 | Comprehensive test suite |  
| Security | 7/10 | 9/10 | Production security measures |
| Production Ready | 6/10 | 9/10 | Full DevOps pipeline |

🎯 OVERALL TARGET: 8.7/10 (Production-ready enterprise application)

===============================================================================
                            📝 IMPLEMENTATION NOTES
===============================================================================

🔧 DEVELOPMENT WORKFLOW:
1. Create feature branch cho mỗi phase
2. Code review mandatory cho tất cả changes  
3. Testing before merge to main
4. Staging deployment cho manual testing
5. Production deployment sau full testing

⚠️  RISK MITIGATION:
- Backup current working version trước major changes
- Incremental implementation (không big bang)
- Fallback plans cho mỗi major change
- Load testing trước production deployment

📚 LEARNING RESOURCES:
- React Query documentation và best practices
- Testing Library patterns và strategies  
- Performance optimization guides
- Security best practices cho React apps

🎉 EXPECTED OUTCOMES:
- Production-ready ecommerce platform
- Maintainable, scalable codebase
- Excellent user experience  
- Zero production bugs
- Fast development velocity for future features

===============================================================================
                                   END PLAN
===============================================================================
